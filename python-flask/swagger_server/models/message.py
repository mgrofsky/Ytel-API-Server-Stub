# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.template_data import TemplateData  # noqa: F401,E501
from swagger_server import util


class Message(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, api_version: str=None, message_sid: str=None, _from: str=None, to: str=None, message_price: str=None, body: str=None, date_sent: str=None, status: str=None, template_id: str=None, template_data: TemplateData=None):  # noqa: E501
        """Message - a model defined in Swagger

        :param api_version: The api_version of this Message.  # noqa: E501
        :type api_version: str
        :param message_sid: The message_sid of this Message.  # noqa: E501
        :type message_sid: str
        :param _from: The _from of this Message.  # noqa: E501
        :type _from: str
        :param to: The to of this Message.  # noqa: E501
        :type to: str
        :param message_price: The message_price of this Message.  # noqa: E501
        :type message_price: str
        :param body: The body of this Message.  # noqa: E501
        :type body: str
        :param date_sent: The date_sent of this Message.  # noqa: E501
        :type date_sent: str
        :param status: The status of this Message.  # noqa: E501
        :type status: str
        :param template_id: The template_id of this Message.  # noqa: E501
        :type template_id: str
        :param template_data: The template_data of this Message.  # noqa: E501
        :type template_data: TemplateData
        """
        self.swagger_types = {
            'api_version': str,
            'message_sid': str,
            '_from': str,
            'to': str,
            'message_price': str,
            'body': str,
            'date_sent': str,
            'status': str,
            'template_id': str,
            'template_data': TemplateData
        }

        self.attribute_map = {
            'api_version': 'ApiVersion',
            'message_sid': 'MessageSid',
            '_from': 'From',
            'to': 'To',
            'message_price': 'MessagePrice',
            'body': 'Body',
            'date_sent': 'DateSent',
            'status': 'Status',
            'template_id': 'TemplateId',
            'template_data': 'TemplateData'
        }

        self._api_version = api_version
        self._message_sid = message_sid
        self.__from = _from
        self._to = to
        self._message_price = message_price
        self._body = body
        self._date_sent = date_sent
        self._status = status
        self._template_id = template_id
        self._template_data = template_data

    @classmethod
    def from_dict(cls, dikt) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Message of this Message.  # noqa: E501
        :rtype: Message
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_version(self) -> str:
        """Gets the api_version of this Message.

          # noqa: E501

        :return: The api_version of this Message.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version: str):
        """Sets the api_version of this Message.

          # noqa: E501

        :param api_version: The api_version of this Message.
        :type api_version: str
        """
        if api_version is None:
            raise ValueError("Invalid value for `api_version`, must not be `None`")  # noqa: E501

        self._api_version = api_version

    @property
    def message_sid(self) -> str:
        """Gets the message_sid of this Message.

          # noqa: E501

        :return: The message_sid of this Message.
        :rtype: str
        """
        return self._message_sid

    @message_sid.setter
    def message_sid(self, message_sid: str):
        """Sets the message_sid of this Message.

          # noqa: E501

        :param message_sid: The message_sid of this Message.
        :type message_sid: str
        """
        if message_sid is None:
            raise ValueError("Invalid value for `message_sid`, must not be `None`")  # noqa: E501

        self._message_sid = message_sid

    @property
    def _from(self) -> str:
        """Gets the _from of this Message.

          # noqa: E501

        :return: The _from of this Message.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """Sets the _from of this Message.

          # noqa: E501

        :param _from: The _from of this Message.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self) -> str:
        """Gets the to of this Message.

          # noqa: E501

        :return: The to of this Message.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this Message.

          # noqa: E501

        :param to: The to of this Message.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def message_price(self) -> str:
        """Gets the message_price of this Message.

          # noqa: E501

        :return: The message_price of this Message.
        :rtype: str
        """
        return self._message_price

    @message_price.setter
    def message_price(self, message_price: str):
        """Sets the message_price of this Message.

          # noqa: E501

        :param message_price: The message_price of this Message.
        :type message_price: str
        """
        if message_price is None:
            raise ValueError("Invalid value for `message_price`, must not be `None`")  # noqa: E501

        self._message_price = message_price

    @property
    def body(self) -> str:
        """Gets the body of this Message.

          # noqa: E501

        :return: The body of this Message.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body: str):
        """Sets the body of this Message.

          # noqa: E501

        :param body: The body of this Message.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")  # noqa: E501

        self._body = body

    @property
    def date_sent(self) -> str:
        """Gets the date_sent of this Message.

          # noqa: E501

        :return: The date_sent of this Message.
        :rtype: str
        """
        return self._date_sent

    @date_sent.setter
    def date_sent(self, date_sent: str):
        """Sets the date_sent of this Message.

          # noqa: E501

        :param date_sent: The date_sent of this Message.
        :type date_sent: str
        """
        if date_sent is None:
            raise ValueError("Invalid value for `date_sent`, must not be `None`")  # noqa: E501

        self._date_sent = date_sent

    @property
    def status(self) -> str:
        """Gets the status of this Message.

          # noqa: E501

        :return: The status of this Message.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Message.

          # noqa: E501

        :param status: The status of this Message.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def template_id(self) -> str:
        """Gets the template_id of this Message.

          # noqa: E501

        :return: The template_id of this Message.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id: str):
        """Sets the template_id of this Message.

          # noqa: E501

        :param template_id: The template_id of this Message.
        :type template_id: str
        """
        if template_id is None:
            raise ValueError("Invalid value for `template_id`, must not be `None`")  # noqa: E501

        self._template_id = template_id

    @property
    def template_data(self) -> TemplateData:
        """Gets the template_data of this Message.


        :return: The template_data of this Message.
        :rtype: TemplateData
        """
        return self._template_data

    @template_data.setter
    def template_data(self, template_data: TemplateData):
        """Sets the template_data of this Message.


        :param template_data: The template_data of this Message.
        :type template_data: TemplateData
        """
        if template_data is None:
            raise ValueError("Invalid value for `template_data`, must not be `None`")  # noqa: E501

        self._template_data = template_data
