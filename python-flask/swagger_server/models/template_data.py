# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TemplateData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, companyname: str=None, otpcode: str=None):  # noqa: E501
        """TemplateData - a model defined in Swagger

        :param companyname: The companyname of this TemplateData.  # noqa: E501
        :type companyname: str
        :param otpcode: The otpcode of this TemplateData.  # noqa: E501
        :type otpcode: str
        """
        self.swagger_types = {
            'companyname': str,
            'otpcode': str
        }

        self.attribute_map = {
            'companyname': 'companyname',
            'otpcode': 'otpcode'
        }

        self._companyname = companyname
        self._otpcode = otpcode

    @classmethod
    def from_dict(cls, dikt) -> 'TemplateData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TemplateData of this TemplateData.  # noqa: E501
        :rtype: TemplateData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def companyname(self) -> str:
        """Gets the companyname of this TemplateData.

          # noqa: E501

        :return: The companyname of this TemplateData.
        :rtype: str
        """
        return self._companyname

    @companyname.setter
    def companyname(self, companyname: str):
        """Sets the companyname of this TemplateData.

          # noqa: E501

        :param companyname: The companyname of this TemplateData.
        :type companyname: str
        """
        if companyname is None:
            raise ValueError("Invalid value for `companyname`, must not be `None`")  # noqa: E501

        self._companyname = companyname

    @property
    def otpcode(self) -> str:
        """Gets the otpcode of this TemplateData.

          # noqa: E501

        :return: The otpcode of this TemplateData.
        :rtype: str
        """
        return self._otpcode

    @otpcode.setter
    def otpcode(self, otpcode: str):
        """Sets the otpcode of this TemplateData.

          # noqa: E501

        :param otpcode: The otpcode of this TemplateData.
        :type otpcode: str
        """
        if otpcode is None:
            raise ValueError("Invalid value for `otpcode`, must not be `None`")  # noqa: E501

        self._otpcode = otpcode
