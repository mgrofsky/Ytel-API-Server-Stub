/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-10-11T03:48:43.806Z")

@Api(value = "address", description = "the address API")
public interface AddressApi {

    @ApiOperation(value = "Create Address", nickname = "addressCreateaddress", notes = "To add an address to your address book, you create a new address object. You can retrieve and delete individual addresses as well as get a list of addresses. Addresses are identified by a unique random ID.", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Address", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/address/createaddress.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> addressCreateaddress(@ApiParam(value = "Name of user", required=true) @RequestParam(value="Name", required=true)  String name,@ApiParam(value = "Address of user.", required=true) @RequestParam(value="Address", required=true)  String address,@ApiParam(value = "Must be a 2 letter country short-name code (ISO 3166)", required=true) @RequestParam(value="Country", required=true)  String country,@ApiParam(value = "Must be a 2 letter State eg. CA for US. For Some Countries it can be greater than 2 letters.", required=true) @RequestParam(value="State", required=true)  String state,@ApiParam(value = "City Name.", required=true) @RequestParam(value="City", required=true)  String city,@ApiParam(value = "Zip code of city.", required=true) @RequestParam(value="Zip", required=true)  String zip,@ApiParam(value = "Description of addresses.") @RequestParam(value="Description", required=false)  String description,@ApiParam(value = "Email Id of user.") @RequestParam(value="email", required=false)  String email,@ApiParam(value = "Phone number of user.") @RequestParam(value="Phone", required=false)  String phone);


    @ApiOperation(value = "Delete Address", nickname = "addressDeleteaddress", notes = "To delete Address to your address book", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Address", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/address/deleteaddress.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> addressDeleteaddress(@ApiParam(value = "The identifier of the address to be deleted.", required=true) @RequestParam(value="addressid", required=true)  String addressid);


    @ApiOperation(value = "List Addresses", nickname = "addressListaddress", notes = "List All Address ", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Address", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/address/listaddress.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> addressListaddress(@ApiParam(value = "The page count to retrieve from the total results in the collection. Page indexing starts at 1.", defaultValue="1") @RequestParam(value="page", required=false)  Integer page,@ApiParam(value = "How many results to return, default is 10, max is 100, must be an integer", defaultValue="10") @RequestParam(value="pagesize", required=false)  Integer pagesize,@ApiParam(value = "addresses Sid") @RequestParam(value="addressid", required=false)  String addressid,@ApiParam(value = "date created address.") @RequestParam(value="dateCreated", required=false)  String dateCreated);


    @ApiOperation(value = "Verify Address", nickname = "addressVerifyaddress", notes = "Validates an address given.", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Address", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/address/verifyaddress.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> addressVerifyaddress(@ApiParam(value = "The identifier of the address to be verified.", required=true) @RequestParam(value="addressid", required=true)  String addressid);


    @ApiOperation(value = "View Address", nickname = "addressViewaddress", notes = "View Address Specific address Book by providing the address id", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Address", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/address/viewaddress.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> addressViewaddress(@ApiParam(value = "The identifier of the address to be retrieved.", required=true) @RequestParam(value="addressid", required=true)  String addressid);

}
