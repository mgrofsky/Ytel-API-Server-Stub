/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.12-1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-06-15T17:00:45.154Z")

@Api(value = "email", description = "the email API")
public interface EmailApi {

    @ApiOperation(value = "Add Email Unsubscribe", nickname = "emailAddunsubscribesemail", notes = "Add an email to the unsubscribe list", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Email", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/email/addunsubscribesemail.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> emailAddunsubscribesemail(@ApiParam(value = "A valid email address that is to be added to the unsubscribe list", required=true) @RequestPart(value="email", required=true)  String email);


    @ApiOperation(value = "Remove Blocked Address", nickname = "emailDeleteblocksemail", notes = "Remove an email from blocked emails list.", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Email", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/email/deleteblocksemail.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> emailDeleteblocksemail(@ApiParam(value = "The email address to be remove from the blocked list.", required=true) @RequestPart(value="Email", required=true)  String email);


    @ApiOperation(value = "Remove Bounced Email", nickname = "emailDeletebouncesemail", notes = "Remove an email address from the bounced list.", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Email", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/email/deletebouncesemail.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> emailDeletebouncesemail(@ApiParam(value = "The email address to be remove from the bounced email list.", required=true) @RequestPart(value="Email", required=true)  String email);


    @ApiOperation(value = "Remove Invalid Email", nickname = "emailDeleteinvalidemail", notes = "Remove an email from the invalid email list.", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Email", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/email/deleteinvalidemail.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> emailDeleteinvalidemail(@ApiParam(value = "A valid email address that is to be remove from the invalid email list.", required=true) @RequestPart(value="Email", required=true)  String email);


    @ApiOperation(value = "Remove Spam Address", nickname = "emailDeletespamemail", notes = "Remove an email from the spam email list.", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Email", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/email/deletespamemail.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> emailDeletespamemail(@ApiParam(value = "A valid email address that is to be remove from the spam list.", required=true) @RequestPart(value="Email", required=true)  String email);


    @ApiOperation(value = "Remove Unsubscribed Email", nickname = "emailDeleteunsubscribedemail", notes = "Remove an email address from the list of unsubscribed emails.", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Email", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/email/deleteunsubscribedemail.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> emailDeleteunsubscribedemail(@ApiParam(value = "A valid email address that is to be remove from the unsubscribe list.", required=true) @RequestPart(value="email", required=true)  String email);


    @ApiOperation(value = "Blocked Emails", nickname = "emailListblockemail", notes = "Retrieve a list of emails that have been blocked.", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Email", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/email/listblockemail.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> emailListblockemail(@ApiParam(value = "The starting point of the list of blocked emails that should be returned.") @RequestPart(value="Offset", required=false)  String offset,@ApiParam(value = "The count of results that should be returned.") @RequestPart(value="Limit", required=false)  String limit);


    @ApiOperation(value = "Bounced Emails", nickname = "emailListbounceemail", notes = "Retrieve a list of emails that have bounced.", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Email", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/email/listbounceemail.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> emailListbounceemail(@ApiParam(value = "The starting point of the list of bounced emails that should be returned.") @RequestPart(value="Offset", required=false)  String offset,@ApiParam(value = "The count of results that should be returned.") @RequestPart(value="Limit", required=false)  String limit);


    @ApiOperation(value = "Invalid Emails", nickname = "emailListinvalidemail", notes = "Retrieve a list of invalid email addresses.", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Email", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/email/listinvalidemail.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> emailListinvalidemail(@ApiParam(value = "The starting point of the list of invalid emails that should be returned.") @RequestPart(value="Offset", required=false)  String offset,@ApiParam(value = "The count of results that should be returned.") @RequestPart(value="Limit", required=false)  String limit);


    @ApiOperation(value = "Spam Emails", nickname = "emailListspamemail", notes = "Retrieve a list of emails that are on the spam list.", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Email", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/email/listspamemail.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> emailListspamemail(@ApiParam(value = "The starting point of the list of spam emails that should be returned.") @RequestPart(value="Offset", required=false)  String offset,@ApiParam(value = "The count of results that should be returned.") @RequestPart(value="Limit", required=false)  String limit);


    @ApiOperation(value = "List Unsubscribed Emails", nickname = "emailListunsubscribedemail", notes = "Retrieve a list of email addresses from the unsubscribe list.", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Email", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/email/listunsubscribedemail.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> emailListunsubscribedemail(@ApiParam(value = "The starting point of the list of unsubscribed emails that should be returned.") @RequestPart(value="Offset", required=false)  String offset,@ApiParam(value = "The count of results that should be returned.") @RequestPart(value="Limit", required=false)  String limit);


    @ApiOperation(value = "Send Email", nickname = "emailSendemails", notes = "Create and submit an email message to one or more email addresses.", response = String.class, authorizations = {
        @Authorization(value = "auth")
    }, tags={ "Email", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = String.class) })
    @RequestMapping(value = "/email/sendemails.json",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<String> emailSendemails(@ApiParam(value = "A valid address that will receive the email. Multiple addresses can be separated by using commas.", required=true) @RequestPart(value="To", required=true)  String to,@ApiParam(value = "Specifies the type of email to be sent", required=true, allowableValues="text, html") @RequestPart(value="Type", required=true)  String type,@ApiParam(value = "The subject of the mail. Must be a valid string.", required=true) @RequestPart(value="Subject", required=true)  String subject,@ApiParam(value = "The email message that is to be sent in the text.", required=true) @RequestPart(value="Message", required=true)  String message,@ApiParam(value = "A valid address that will send the email.") @RequestPart(value="From", required=false)  String from,@ApiParam(value = "Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.") @RequestPart(value="Cc", required=false)  String cc,@ApiParam(value = "Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using commas.") @RequestPart(value="Bcc", required=false)  String bcc,@ApiParam(value = "A file that is attached to the email. Must be less than 7 MB in size.") @RequestPart(value="Attachment", required=false)  String attachment);

}
